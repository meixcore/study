import os
import telebot
import time
import json

bot = telebot.TeleBot(os.getenv('bot'))
user_sleep_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ü•∞\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã '
                                           '/sleep, /wake, /quality –∏ /notes.')

@bot.message_handler(commands=['sleep'])
def sleep(message):
    user_id = message.from_user.id

    user_sleep_data.setdefault(user_id, []).append({
        'sleep_time': time.time(),
        'duration': None,
        'quality': None,
        'notes': None
    })
    save_data()
    bot.send_message(message.from_user.id, '–°–ø–æ–∫–∏! –ù–µ –∑–∞–±—É–¥—å —Å–æ–æ–±—â–∏—Ç—å –º–Ω–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω–µ—à—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /wake')

@bot.message_handler(commands=['wake'])
def wake(message):
    user_id = message.from_user.id

    if user_sleep_data[user_id][-1]['sleep_time'] is not None:
        wake_time = time.time()
        sleep_duration = wake_time - user_sleep_data[user_id][-1]['sleep_time']
        hours = int(sleep_duration // 3600)
        minutes = int((sleep_duration % 3600) // 60)
        user_sleep_data[user_id][-1]['duration'] = sleep_duration
        save_data()
        bot.send_message(message.chat.id,
                         f'–¢—ã –ø—Ä–æ—Å–ø–∞–ª {hours} —á. {minutes} –º–∏–Ω. –ù–µ –∑–∞–±—É–¥—å –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π '
                         f'/quality –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /notes')
    else:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /sleep –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–Ω–∞!')

@bot.message_handler(commands=['quality'])
def quality(message):
    user_id = message.from_user.id
    if user_sleep_data[user_id][-1]['quality'] is None:
        bot.send_message(message.chat.id, '–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –æ—Ç 1 –¥–æ 5')
        bot.register_next_step_handler(message, process_quality_step)
    else:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /sleep –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞.')

def process_quality_step(message):
    user_id = message.from_user.id
    try:
        quality_score = int(message.text)
        if 1 <= quality_score <= 5:
            user_sleep_data[user_id][-1]['quality'] = quality_score
            save_data()
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /notes')
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.')
            bot.register_next_step_handler(message, process_quality_step)
    except ValueError:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏.')
        bot.register_next_step_handler(message, process_quality_step)

@bot.message_handler(commands=['notes'])
def notes(message):
    user_id = message.from_user.id
    if user_sleep_data[user_id][-1]['notes'] is None:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –æ –≤–∞—à–µ–º —Å–Ω–µ:')
        bot.register_next_step_handler(message, process_notes_step)
    else:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /sleep –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏.')


def process_notes_step(message):
    user_id = message.from_user.id
    user_sleep_data[user_id][-1]['notes'] = message.text
    bot.send_message(message.chat.id, '–ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    if user_sleep_data[user_id][-1]['quality'] is not None:
        print(user_sleep_data[user_id]) # –æ—Å—Ç–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        bot.send_message(message.chat.id, f'–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã. –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: '
                                          f'{user_sleep_data[user_id][-1]['quality']}. '
                                          f'–ó–∞–º–µ—Ç–∫–∏: {user_sleep_data[user_id][-1]['notes']}')

def save_data():
    with open('sleep_data.json', 'w') as f:
        json.dump(user_sleep_data, f)

bot.polling(non_stop=True, interval=0)